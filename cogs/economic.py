from typing import Union
from datetime import datetime, timedelta
from random import choice, randint

import disnake
from disnake.ext import commands
from Tools.exceptions import CustomError


class Economy(commands.Cog, name="—ç–∫–æ–Ω–æ–º–∏–∫–∞", description="–¢–∏–ø–∞ —ç–∫–æ–Ω–æ–º–∏—Å—Ç, —Ç–∏–ø–∞ –±–æ–≥–∞—Ç—ã–µ. –í—Å–µ –¥–µ–ª–∞ —Ç–∞–º, –¥–∞)0 (–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –≤ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"):

    COG_EMOJI = "üí∞"
    hidden = True

    def __init__(self, bot):
        self.bot = bot
        self.emoji = 'üí∏'

    @commands.slash_command(name="work", description="–†–∞–±–æ—Ç–∞ –∑–∞—Å—Ç–∞–Ω–µ—Ç –≤–∞—Å –¥–∞–∂–µ –∑–¥–µ—Å—å!")
    async def economy_work(self, ctx):
        db = self.bot.config.DB.economic
        works = {
            '–ì—Ä—É–∑—á–∏–∫': 1500,
            '–£—á–∏—Ç–µ–ª—å': 500,
            '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫': 2000,
            '–•—É–¥–æ–∂–Ω–∏–∫': 1750,
            '–î–≤–æ—Ä–Ω–∏–∫': 200,
            '–í—Ä–∞—á': 1800,
            '–°—Ç—Ä–æ–∏—Ç–µ–ª—å': 2100,
            '–ú–µ–¥. —Å–µ—Å—Ç—Ä–∞': 500,
            '–õ–µ—Å–Ω–∏–∫': 2000
        }
        work = choice(list(works))
        embed = await self.bot.embeds.simple(
            title='–†–∞–±–æ—Ç—ã (–≠–∫–æ–Ω–æ–º–∏–∫–∞)',
            fields=[
                {'name': '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è', 'value': work},
                {'name': '–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏', 'value': str(works[work]) + self.emoji}
            ]
        )
        if await db.count_documents({'guild': ctx.guild.id, 'member': ctx.author.id}) == 0:
            await db.insert_one({"guild": ctx.guild.id, 'member': ctx.author.id, 'money': works[work], 'bank': 0, 'work_timeout': datetime.now()})
        else:
            data = await db.find_one({"guild": ctx.guild.id, "member": ctx.author.id})
            time_data = await db.find_one({"guild": ctx.guild.id, 'member': ctx.author.id, 'work_timeout': {'$gte': datetime.now() - timedelta(hours=10)}})
            
            if not time_data:
                await db.update_one({"guild": ctx.guild.id, 'member': ctx.author.id}, {"$set": {'money': data['money']+works[work], 'work_timeout': datetime.now()}})
            else:
                raise CustomError(f"–≠—ç... –í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–æ! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –í–∞–º –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –¥–æ <t:{round((data['work_timeout']+timedelta(hours=10)).timestamp())}:D>")

        await ctx.reply(embed=embed)

    @commands.slash_command(name="daily", description="–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫ –ø–æ–ª—É—á–∏—Ç—å 1500 üí∏!")
    async def economy_daily(self, ctx):
        db = self.bot.config.DB.economic
        embed = await self.bot.embeds.simple(
            title='–†–∞–±–æ—Ç—ã (–≠–∫–æ–Ω–æ–º–∏–∫–∞)',
            description="–í–∞—à–∏ **1500** –º–æ–Ω–µ—Ç –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã!"
        )

        if await db.count_documents({'guild': ctx.guild.id, 'member': ctx.author.id}) == 0:
            await db.insert_one({"guild": ctx.guild.id, 'member': ctx.author.id, 'money': 1500, 'bank': 0, 'daily': datetime.now()})
        else:
            data = await db.find_one({"guild": ctx.guild.id, "member": ctx.author.id})
            time_data = await db.find_one({"guild": ctx.guild.id, 'member': ctx.author.id, 'daily': {'$gte': datetime.now() - timedelta(hours=24)}})
            
            if not time_data:
                await db.update_one({"guild": ctx.guild.id, 'member': ctx.author.id}, {"$set": {'money': data['money']+1500, 'daily': datetime.now()}})
            else:
                raise CustomError(f"–≠—ç... –í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–æ! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –í–∞–º –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –¥–æ <t:{round((data['daily']+timedelta(hours=24)).timestamp())}:D>")

        await ctx.reply(embed=embed)

    @commands.slash_command(name="balance", aliases=['bal'], description="–í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", usage="balance [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]")
    async def economy_balance(self, ctx, user: disnake.User = None):
        user = user if user else ctx.author 
        db = self.bot.config.DB.economic
        embed = await self.bot.embeds.simple(title=f'–ë–∞–ª–∞–Ω—Å {user.name}')
        
        if await db.count_documents({"guild": ctx.guild.id, 'member': user.id}) == 0:
            raise CustomError("–£ –Ω–µ–≥–æ(-–µ—ë) —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ–π –∫–æ—à–µ–ª—ë–∫(")
        else:
            data = await db.find_one({"guild": ctx.guild.id, 'member': user.id})
            embed.description = f'–í –∫–æ—à–µ–ª—å–∫–µ: **{data["money"]}** {self.emoji}\n–í –±–∞–Ω–∫–µ: **{data["bank"]}** {self.emoji}\n–°—É–º–º–∞—Ä–Ω–æ: **{data["money"]+data["bank"]}** {self.emoji}'

        await ctx.reply(embed=embed)

    @commands.slash_command(name="deposit", aliases=['dep'], description="–ü–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫", usage='deposit <–°—É–º–º–∞>')
    async def economy_deposit(self, ctx, number: int = None):
        db = self.bot.config.DB.economic
        
        if await db.count_documents({"guild": ctx.guild.id, "member": ctx.author.id}) == 0:
            raise CustomError("–£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç –¥–µ–Ω–µ–≥, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫?)")
        else:
            data = await db.find_one({"guild": ctx.guild.id, "member": ctx.author.id})

            if data['money'] <= 0:
                raise CustomError("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥!")
            
            number = data['money'] if not bool(number) else number

            if data['money'] < number:
                raise CustomError("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥, –º–∏–ª—ã–π.")
            else:
                await db.update_one({"guild": ctx.guild.id, "member": ctx.author.id}, {"$set": {"money": data['money']-number, "bank": data['bank']+data['money']}})
                await ctx.reply(f"–í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –±—ã–ª–∏ –ø–æ–ª–æ–∂–µ–Ω—ã –≤ –±–∞–Ω–∫! –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –≤ —Ü–µ–ª–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏! uwu")

    @commands.slash_command(name="withdraw", aliases=['wd'], description="–ü–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫", usage='withdraw <–°—É–º–º–∞>')
    async def economy_withdraw(self, ctx, number: int = None):
        db = self.bot.config.DB.economic
        
        if await db.count_documents({"guild": ctx.guild.id, "member": ctx.author.id}) == 0:
            raise CustomError("–£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç –¥–µ–Ω–µ–≥, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫?)")
        else:
            data = await db.find_one({"guild": ctx.guild.id, "member": ctx.author.id})

            if data['bank'] <= 0:
                raise CustomError("–£ –≤–∞—Å –Ω—É–ª–µ–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç!")
            
            number = data['bank'] if not bool(number) else number

            if data['bank'] < number:
                raise CustomError("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ, –º–∏–ª—ã–π.")
            else:
                await db.update_one({"guild": ctx.guild.id, "member": ctx.author.id}, {"$set": {"money": data['money']+number, "bank": data['bank']-number}})
                await ctx.reply(f"–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ –í–∞—à –ª–∏—á–Ω—ã–π —Å—á—ë—Ç!")

    @commands.slash_command(name="rob", description="–û–≥—Ä–∞–±–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ê–π-–∞–π-–∞–π, –Ω–µ–ª—å–∑—è —Ç–∞–∫! –ù–∞–ø–∏—à—É –≤ –ø–æ–ª–∏—Ü–∏—é! –ù–∞–≤–µ—Ä–Ω–æ–µ.")
    async def economy_rob(self, ctx, member: disnake.Member):
        db = self.bot.config.DB.economic

        if await db.count_documents({"guild": ctx.guild.id, "member": member.id}) == 0:
            raise CustomError("–î–∞ —ç—Ç–∞ –±–µ–¥–Ω—è–∂–∫–∞ –∏ —Ç–∞–∫ –Ω–∞ –º–µ–ª–∏(")
        elif await db.count_documents({"guild": ctx.guild.id, "member": ctx.author.id}) == 0:
            await db.insert_one({"guild": ctx.guild.id, 'member': ctx.author.id, 'money': 0, 'bank': 0})
        else:
            data = await db.find_one({"guild": ctx.guild.id, "member": member.id})
            robber = await db.find_one({"guild": ctx.guild.id, "member": ctx.author.id})

            if data['money'] < 0:
                raise CustomError("–£ –Ω–µ–≥–æ(–µ—ë) –Ω–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ª–∏—á–Ω–æ–º —Å—á–µ—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ –≤—Å—ë –≤ –±–∞–Ω–∫–µ –∏–ª–∏ –ø—Ä–æ–ø–∏–ª(–∞) –≤—Å—ë")
            else:
                robbed = randint(1, data['money'])
                time_data = await db.find_one({"guild": ctx.guild.id, 'member': ctx.author.id, 'rob_time': {'$gte': datetime.now() - timedelta(hours=5)}})
                
                if not time_data:
                    if robbed > 999:
                        raise CustomError("–ë–æ–ª–µ–µ —á–µ–º 999 —É–∫—Ä–∞—Å—Ç—å –Ω–µ–ª—å–∑—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ u-u.")
                    elif robbed > data['money']:
                        raise CustomError("–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –≤—ã–∫—Ä–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —Ç–∞–∫ —á—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑)")
                    else:
                        await db.update_one({"guild": ctx.guild.id, 'member': member.id}, {"$set": {"money": data['money']-robbed}})
                        await db.update_one({"guild": ctx.guild.id, 'member': ctx.author.id}, {"$set": {"money": robbed + robber['money'], "rob_time": datetime.now()}})
                        await ctx.reply(f'–í—ã –æ–≥—Ä–∞–±–∏–ª–∏ **{member.name}** –Ω–∞ **{robbed}** üí∞. –ó–∞—á–µ–º?')
                else:
                    raise CustomError(f"–≠—ç... –í—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–æ! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –í–∞–º –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –¥–æ <t:{round((robber['rob_time']+timedelta(hours=5)).timestamp())}:D>")

    """@commands.command(name='shop', description='–ú–∞–≥–∞–∑–∏–Ω. –ü—Ä–æ—Å—Ç–æ –º–∞–≥–∞–∑–∏–Ω')
    async def economy_shop(self, ctx):
        db = self.bot.config.DB.economic
        if await db.count_documents({"shop_guild": ctx.guild.id}) == 0:
            raise CustomError("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç–æ–π.")
        else:
            data = [i async for i in db.find({"shop_guild": ctx.guild.id})]
            description = ''
            for i, j in enumerate(data):
                # description += f'{i} - {j}'
                description += f'{i+1} | {ctx.guild.get_role(j["product"]["name"]).mention} - {j["product"]["price"]}'

            await ctx.reply(embed=await self.bot.embeds.simple(title=f'–ú–∞–≥–∞–∑–∏–Ω—á–∏–∫ {ctx.guild.name}', description=description))

    @commands.command(name='add-product', description='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—á–∏–∫', usage="add-product <–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞> <–¶–µ–Ω–∞>")
    @commands.has_permissions(manage_guild=True)
    async def economy_add_product(self, ctx, product: disnake.Role, price: int):
        db = self.bot.config.DB.economic
        if await db.count_documents({"shop_guild": ctx.guild.id, "product": {'name:': product.id, 'price': price}}) == 0:
            await db.insert_one({"shop_guild": ctx.guild.id, "product": {'name': product.id, 'price': price, "num": }})
            await ctx.reply("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω!")
        else:
            raise CustomError("–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ")

    commands.command(name="buy", description="–ö—É–ø–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–µ–¥–º–µ—Ç, –¥–∞", usage="buy <–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>")
    async def economy_buy(self, ctx, product: Union[str, disnake.Role]):
        db = self.bot.config.DB.economic"""



def setup(bot):
    bot.add_cog(Economy(bot))
