from asyncio import sleep
from io import BytesIO
from typing import Literal
from random import randint, choices
from string import punctuation
from typing import Literal
from threading import Thread
import blurplefier
import aiohttp

import disnake
from disnake.ext import commands

from Tools.exceptions import CustomError
from Tools.images import ship_image
from services import waifu_pics

OVERLAY_DESCRIPTIONS = {
    'jail': '`{0}` –ó–∞ —à–æ —Å–∏–¥–∏–º?',
    'wasted': 'R.I.P. `{0}` –ø–æ–≥–∏–±(-–ª–∞) —Å–º–µ—Ä—Ç—å—é —Ö—Ä–∞–±—Ä—ã—Ö :D',
    'gay': 'ü§≠',
    'triggered': '–í–´–ê–´–í–û–ê–´–ê–û–´–í–ê–´–í–ê–†–´–†–ê–í–´–†–ê–õ–û'
}



class Fun(commands.Cog, name="—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", description="–í—Å—è–∫–∏–µ —Ç–∞–º —Ä–∞–∑–≤–ª–µ–∫–∞—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, –¥–∞."):

    def __init__(self, client):
        self.client = client
        self.client.session = aiohttp.ClientSession()

    @commands.slash_command(name="8ball")
    async def eightball(self, ctx, *, question):
        responses = ['–≠—Ç–æ —Ç–æ—á–Ω–æ',
                     '–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è',
                     '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ',
                     '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞',
                     '–≠—Ç–æ —Ç–æ—á–Ω–æ —Ç–∞–∫',
                     '–ö–∞–∫ —è –≤–∏–∂—É, –¥–∞',
                     '–ë–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ',
                     '–î–∞',
                     '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ —Ö–æ—Ä–æ—à–∞—è',
                     '–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –¥–∞',
                     '–°–º–µ—à–Ω–æ,.. —Å–º–µ—à–Ω–æ',
                     '–û—Ç–≤—ã—Ç —Ç—É–º–∞–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑',
                     '–õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å',
                     '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ',
                     '–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å',
                     '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –µ—â–µ —Ä–∞–∑',
                     '–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ',
                     '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è',
                     '–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç',
                     '–û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ',
                     '–ù–µ—Ç']

        message = disnake.Embed(title="8 Ball", colour=disnake.Colour.orange())
        message.add_field(name="–í–æ–ø—Ä–æ—Å:", value=question, inline=False)
        message.add_field(name="–û—Ç–≤–µ—Ç:", value=random.choice(responses), inline=False)
        await ctx.send(embed=message)
        

                
    @commands.slash_command(description="–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç a –¥–æ b")
    async def random(self, inter: disnake.ApplicationCommandInteraction, a: int = commands.Param(description="–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ"), b: int = commands.Param(description="–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ")):
        if b < a or a == b:
            raise CustomError('–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –ø–µ—Ä–≤–æ–º—É –ª–∏–±–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º –æ–Ω–æ owo')

        return await inter.send(f'–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ: {randint(a, b)}')
    
    @commands.slash_command(
        name="rps",
        description="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –¥–ª—è –º–Ω–æ–≥–∏—Ö –∏–≥—Ä–∞: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞",
    )
    async def fun_rps(self, inter, user_choice: Literal['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']):
        variants = {'–Ω–æ–∂–Ω–∏—Ü—ã': '–±—É–º–∞–≥–∞', '–∫–∞–º–µ–Ω—å': '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞': '–∫–∞–º–µ–Ω—å'}
        bot_choice = ''.join(choices(list(variants.keys()), weights=[50, 30, 35], k=1))

        if user_choice == variants[bot_choice]:
            await inter.send(f'–Ø –ø–æ–±–µ–¥–∏–ª–∞ u-u! –ú–æ–π –≤—ã–±–æ—Ä –±—ã–ª: `{bot_choice}`')
        else:
            await inter.send(f'–¢—ã –ø–æ–±–µ–¥–∏–ª(-–∞) (. –ú–æ–π –≤—ã–±–æ—Ä –±—ã–ª: `{bot_choice}`' if bot_choice != user_choice else f'–ù–∏—á—å—è, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª üòÖ\n ||{user_choice} - {bot_choice}||')
            
    @commands.slash_command()
    async def fox(self, ctx):
        av = random.randint(1, 120)
        await ctx.send(f"https://randomfox.ca/?i={av}")
        
    @commands.slash_command(name="iq", description="–£–∑–Ω–∞—Ç—å IQ (—ç—Ç–æ —à—É—Ç–∫–∞)")       
    async def _iq(self, ctx, member: disnake.Member = None):
        iq = random.randint(10,300)
        if member == None:
            emb=disnake.Embed(color=0x600C90, title= "–¢–µ—Å—Ç –Ω–∞ IQ", description=f"–ú–Ω–µ –∫–∞–∂–µ—Ç—å—Å—è —á—Ç–æ —É –≤–∞—Å **{iq}** IQ")
            await ctx.send(embed=emb)
        else:
            emb=disnake.Embed(color=0x600C90, title= "–¢–µ—Å—Ç –Ω–∞ IQ", description=f"–ú–Ω–µ –∫–∞–∂–µ—Ç—å—Å—è —á—Ç–æ —É {member.name} **{iq} IQ**")
            await ctx.send(embed=emb)
        
    @commands.slash_command(
        options=[
            disnake.Option(
                'choice', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤–ê—Ç–¨–∫—É owo', 
                type=disnake.OptionType.string,
                required=True, 
                choices=['megumin', 'shinobu', 'awoo', 'neko', 'poke']
            )
        ],
        name='anime-girl',
        description="–ê–Ω–∏–º–µ —Ç—è–Ω–∫–∏"
    )
    async def anime_girl(self, inter: disnake.ApplicationCommandInteraction, choice: str):
        embed = disnake.Embed(title=f'{choice.title()} OwO')
        embed.set_image(url=await waifu_pics.get_image('sfw', choice.lower()))
        return await inter.send(embed=embed)

    @commands.slash_command(name="ship", description="–°–æ–∑–¥–∞–Ω–∏–µ —à–∏–ø-–∫–∞—Ä—Ç–∏–Ω–∫–∏")
    async def ship_not_ship(
        self, 
        inter, 
        user_one: disnake.User,
        second_user: disnake.User
    ):
        await inter.response.defer()
        percentage = randint(1, 100)
        get_image = ship_image(percentage, user_one, second_user)
        file = disnake.File(get_image.image_bytes, 'ship_img.png')
        
        embed=disnake.Embed(title=f'*–°–≤—è–∑–∞–Ω—ã {user_one.name} –Ω–∞ {second_user.name}*' if percentage > 30 else '–•—Ä—É—Å—å üíî')
        embed.set_image(url='attachment://ship_img.png')

        await inter.send(embed=embed, file=file)
        
    @commands.slash_command(
        options=[
            disnake.Option(
                'overlay', '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ', 
                type=disnake.OptionType.string,
                required=True, 
                choices=['wasted', 'jail', 'comrade', 'gay', 'glass', 'passed', 'triggered', 'blurple']
            ),
            disnake.Option('user', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', type=disnake.OptionType.user, required=False)
        ],
        name='avatar-overlay',
        description="–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –∞–≤–∞—Ç–∞—Ä."
    )
    async def overlay_image(self, inter: disnake.ApplicationCommandInteraction, overlay: str, user: disnake.User = commands.Param(lambda inter: inter.author)):
        if overlay == 'blurple':
            input_bytes = await user.display_avatar.read()
            extension, blurplefied_bytes = blurplefier.convert_image(
                input_bytes, blurplefier.Methods.CLASSIC
            )
            avatar_bytes = BytesIO(blurplefied_bytes)

            await inter.send(file=disnake.File(avatar_bytes, filename=f'blurplefied_file.{extension}'))
        else:
            async with self.client.session.get(f'https://some-random-api.ml/canvas/{overlay}?avatar={user.display_avatar.url}') as response:
                data = await response.read()
                image_bytes = BytesIO(data)
                image_filename = f'overlay.{"png" if overlay != "triggered" else "gif"}'
                embed = disnake.Embed(title=OVERLAY_DESCRIPTIONS.get(overlay).format(user) if overlay in OVERLAY_DESCRIPTIONS else disnake.embeds.EmptyEmbed)
                embed.set_image(url=f'attachment://{image_filename}')
                await inter.send(embed=embed, file=disnake.File(image_bytes, filename=image_filename))

def setup(client):
    client.add_cog(Fun(client))	