import asyncio
import calendar as cld
import json
import random
import re
import typing
from datetime import datetime, timedelta
from io import BytesIO
from os import environ
from urllib.parse import quote
from typing import Literal
from bs4 import BeautifulSoup

import aiohttp
from humanize import naturaldelta
from PIL import Image
from textwrap3 import wrap

import disnake
from google.translator import GoogleTranslator
import emoji as emj
from bs4 import BeautifulSoup
from disnake.ext import commands
from disnake import SelectOption
import wikipedia

from Tools.buttons import CurrencyButton
from Tools.decoders import Decoder
from Tools.exceptions import CustomError
from Tools.links import emoji_converter
from Tools.paginator import Paginator
from core.classes.another_embeds import Field, Footer
import core


class WikiDropdown(disnake.ui.Select):
    def __init__(self, bot, author: disnake.Member, wiki_options: list):
        self.bot = bot
        self.author = author

        options = wiki_options
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="wiki_dropdown"
        )

    async def callback(self, inter):
        await inter.response.defer()

        if inter.author.id == self.author.id:
            data = wikipedia.page(title=wikipedia.search(self.values[0])[0])
            embeds = [disnake.Embed(title=data.title, url=data.url, description=i) for i in wrap(data.content, 1998)]
            await inter.edit_original_message(embed=embeds[0], view=Paginator(pages=embeds, author=inter.author))
        else:
            await inter.send('–ù–µ —Ç—ã –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É!', ephemeral=True)


class Utilities(commands.Cog, name="—Å–ª—ç—à-—É—Ç–∏–ª–∏—Ç—ã", description="–í—Ä–æ–¥–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª–µ–∑–Ω—ã, —Ö–¥."):

    COG_EMOJI = "üîß"

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.slash_command(
        description="–í—ã–≤–æ–¥ –∞–≤–∞—Ç–∞—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
    )
    async def avatar(self, inter, user: disnake.User = commands.Param(lambda inter: inter.author)):
        formats = [
            f"[PNG]({user.display_avatar.replace(format='png', size=1024).url}) | ",
            f"[JPG]({user.display_avatar.replace(format='jpg', size=1024).url})",
            f" | [GIF]({user.display_avatar.replace(format='gif', size=1024).url})" if user.display_avatar.is_animated() else ""
        ]
        embed = disnake.Embed(
            title=f"–ê–≤–∞—Ç–∞—Ä {'–±–æ—Ç–∞' if user.bot else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} {user.name}",
            description=''.join(formats),
        )
        embed.set_image(url=user.display_avatar.url)
        return await inter.send(embed=embed)

    @commands.slash_command(
        description='–ü–µ—Ä–µ–≤–æ–¥ –≤/–∏–∑ –∞–∑–±—É–∫–∏ –º–æ—Ä–∑–µ.'
    )
    async def crypter(self, inter, decoder: typing.Literal['–ú–æ—Ä–∑–µ', '–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è'],
                      variant: typing.Literal['crypt', 'decrypt'], text):
        if decoder == "–ú–æ—Ä–∑–µ":            
            if variant == 'crypt':
                morse = Decoder().to_morse(text)
            elif variant == 'decrypt':
                morse = Decoder().from_morse(text)

            embed = disnake.Embed(
                title='Decoder/Encoder –º–æ—Ä–∑–µ.',
                description=morse
            )

        elif decoder == "–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è":
            if variant == 'crypt':
                cezar = ''.join([chr(ord(i) + 3) for i in text])

            elif variant == 'decrypt':
                cezar = ''.join([chr(ord(i) - 3) for i in text])

            embed = disnake.Embed(
                title='Decoder/Encoder —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (3).',
                description=' '.join([i for i in cezar.split()])
            )

        await inter.send(embed=embed)

    @commands.slash_command(
        description="–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    )
    async def guild(self, inter: disnake.ApplicationCommandInteraction, guild: disnake.Guild = commands.Param(lambda inter: inter.guild)):
        channel_ids = sorted(list(i.id for i in guild.channels if not isinstance(i, disnake.CategoryChannel)))
        role_ids = sorted(list(i.id for i in guild.roles if i.id != guild.default_role.id and not i.is_integration()))
        member_ids = sorted(list(i.id for i in guild.members if not i.bot))
        last_joined = list(i.mention + ' | ' + f'<t:{round(i.joined_at.timestamp())}:R>' for i in guild.members if i.joined_at == sorted(list(map(lambda x: x.joined_at, list(filter(lambda x: x.id != guild.owner_id, guild.members)))))[-1])
        first_joined = list(i.mention + ' | ' + f'<t:{round(i.joined_at.timestamp())}:R>' for i in guild.members if i.joined_at == sorted(list(map(lambda x: x.joined_at, list(filter(lambda x: x.id != guild.owner_id, guild.members)))))[0])

        members = (f'–ë–æ—Ç–æ–≤: **{len(list(i.id for i in guild.members if i.bot))}** \n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –±–æ—Ç–æ–≤): **{len(list(i.id for i in guild.members if not i.bot))}** \n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <:offline:987690889147211776> (—Å—á–∏—Ç–∞—è –±–æ—Ç–æ–≤): **{len(list(filter(lambda x: x.status == disnake.Status.online, guild.members)))}** \n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <:dnd:987690886198595665>: **{len(list(filter(lambda x: x.status == disnake.Status.dnd, guild.members)))}** \n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <:idle:987690887876345946>: **{len(list(filter(lambda x: x.status == disnake.Status.idle, guild.members)))}** \n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <:offline:987690889147211776>: **{len(list(filter(lambda x: x.status == disnake.Status.offline, guild.members)))}**')
        dates = (f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: <t:{round(guild.created_at.timestamp())}:R> \n–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫–∞–Ω–∞–ª: {guild.get_channel(channel_ids[0]).mention} | <t:{round(guild.get_channel(channel_ids[0]).created_at.timestamp())}:R> \n–°–∞–º—ã–π –º–æ–ª–æ–¥–æ–π –∫–∞–Ω–∞–ª: {guild.get_channel(channel_ids[-1]).mention} | <t:{round(guild.get_channel(channel_ids[-1]).created_at.timestamp())}:R> \n–°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Ä–æ–ª—å: {guild.get_role(role_ids[0]).mention} | <t:{round(guild.get_role(role_ids[0]).created_at.timestamp())}:R> \n–°–∞–º–∞—è –º–æ–ª–æ–¥–∞—è —Ä–æ–ª—å: {guild.get_role(role_ids[-1]).mention} | <t:{round(guild.get_role(role_ids[-1]).created_at.timestamp())}:R> \n–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {guild.get_member(member_ids[0]).mention} | <t:{round(guild.get_member(member_ids[0]).created_at.timestamp())}:R> \n–°–∞–º—ã–π –º–æ–ª–æ–¥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫: {guild.get_member(member_ids[-1]).mention} | <t:{round(guild.get_member(member_ids[-1]).created_at.timestamp())}:R> \n–ü–µ—Ä–≤—ã–π –∑–∞—à–µ–¥—à–∏–π —É—á–∞—Å—Ç–Ω–∏–∫: {"".join(first_joined)} \n–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—à–µ–¥—à–∏–π —É—á–∞—Å—Ç–Ω–∏–∫: {"".join(last_joined)}')
        boosts = (f'–í–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É—Å—Ç–æ–≤: **{"–î–∞" if guild.premium_progress_bar_enabled else "–ù–µ—Ç"}** \n–ë—É—Å—Ç–µ—Ä–æ–≤: **{len(guild.premium_subscribers)}** \n–£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞: **{guild.premium_tier}**')
        channels = (f'–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: **{len(guild.channels)}** \n–ì–æ–ª–æ—Å–æ–≤—ã—Ö: **{len(guild.voice_channels)}** \n–¢–µ–∫—Å—Ç–æ–≤—ã—Ö: **{len(guild.text_channels)}** \n–í–µ—Ç–æ–∫: **{len(guild.threads)}** \n–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª: {guild.rules_channel.mention if guild.rules_channel else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"} \n–°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª (—á–∞—Ç, –∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ —Ç–æ–º, —á—Ç–æ –∫—Ç–æ-—Ç–æ –∑–∞—à—ë–ª, –±—É—Å—Ç–∞—Ö –∏ –ø—Ä.): {guild.system_channel.mention if guild.system_channel else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}')
        other = (f'–°—Ç–∏–∫–µ—Ä–æ–≤: **{len(guild.stickers)}** \n–≠–º–æ–¥–∑–∏: **{len(guild.emojis)}** \n–°–ø–ª—ç—à: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if not guild.splash else f'–°–ø–ª—ç—à: [—Å—Å—ã–ª–∫–∞ –∑–¥–µ—Å—å]({guild.splash}) \n–í–ª–∞–¥–µ–ª–µ—Ü: {guild.owner.name} \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{guild.max_members}** \n–ê–π–¥–∏ —à–∞—Ä–¥–∞: **{guild.shard_id}**')
        roles = (f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π: **{len(guild.roles)}** \n–í–∞—à–∞ –≤—ã—Å—à–∞—è —Ä–æ–ª—å: {inter.author.top_role.mention if inter.author in guild.members else "–í–∞–º –Ω–µ—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ("} \n–†–æ–ª—å –±—É—Å—Ç–µ—Ä–æ–≤: {guild.premium_subscriber_role.mention if bool(guild.premium_subscriber_role) else "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Ä–æ–ª–∏ –±—É—Å—Ç–µ—Ä–æ–≤"}')

        embed = disnake.Embed(
            title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {guild.name}', 
            description='–£ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è :(' if not guild.description else guild.description, 
        )
        embed.add_field(name="> –£—á–∞—Å—Ç–Ω–∏–∫–∏", value=members, inline=False)
        embed.add_field(name="> –î–∞—Ç—ã", value=dates, inline=False)	
        embed.add_field(name="> –ë—É—Å—Ç—ã", value=boosts, inline=False)	
        embed.add_field(name="> –ö–∞–Ω–∞–ª—ã", value=channels, inline=False)	
        embed.add_field(name="> –†–æ–ª–∏", value=roles, inline=False)	
        embed.add_field(name="> –ü—Ä–æ—á–µ–µ", value=other, inline=False)	

        if guild.icon:
            embed.set_thumbnail(url=guild.icon.url)

        if guild.banner:
            embed.set_image(url=guild.banner.url)

        await inter.send(embed=embed)

    @commands.slash_command(name="user", description="–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é–∑–µ—Ä–µ")
    async def user(self, inter, user: disnake.User = commands.Param(lambda inter: inter.author)):
        statuses = {
            disnake.Status.online: '<:online:987690890443247646>',
            disnake.Status.dnd: '<:dnd:987690886198595665>',
            disnake.Status.idle: '<:idle:987690887876345946>',
            disnake.Status.offline: '<:offline:987690889147211776>'
        }
        embed = disnake.Embed(title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {"–±–æ—Ç–µ" if user.bot else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"} {user.name}')
        user = await self.bot.fetch_user(user.id)

        if user.banner:
            embed.set_image(url=user.banner.url)
        else:
            color = Image.open(BytesIO(await user.display_avatar.read())).resize((720, 720)).convert('RGB')
            img = Image.new('RGBA', (500, 200), '#%02x%02x%02x' % color.getpixel((360, 360)))
            img.save('banner.png', 'png')
            file = disnake.File(BytesIO(open('banner.png', 'rb').read()), filename='banner.png')
            
            embed.set_image(url='attachment://banner.png')

        embed.set_thumbnail(url=user.display_avatar.url)
        embed.set_footer(text=f"ID: {user.id}")
        embed.add_field(name='–°—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ', value='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' if user.id in [578533097293873162, 805881717415346236] else '–≠—Ç–æ —è!' if user.id == self.bot.user.id else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', inline=True)

        main_information = [
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: **<t:{round(user.created_at.timestamp())}:R>** | {(datetime.utcnow() - user.created_at.replace(tzinfo=None)).days} –¥–Ω–µ–π",
            f"–ü–æ–ª–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: **{str(user)}**",
        ]

        if user in inter.guild.members:
            user_to_member = inter.guild.get_member(user.id)
            bool_to_symbol = {True: '+', False: '-'}

            embed.title = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {"–±–æ—Ç–µ" if user.bot else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"} {user.name} {"üì±" if user_to_member.is_on_mobile() else "üñ•Ô∏è"}'

            permissions_embed = disnake.Embed(
                title=f'–ü—Ä–∞–≤–∞ {user_to_member}',
                description='```' + 'diff\n' + '\n'.join([f'{bool_to_symbol[i[-1]]} {i[0].replace("_", " ").capitalize()}' for i in user_to_member.guild_permissions]) + '```'
            )

            spotify = list(filter(lambda x: isinstance(x, disnake.activity.Spotify), user_to_member.activities))
            second_information = [
                f"–ó–∞—à—ë–ª(-–ª–∞) –Ω–∞ —Å–µ—Ä–≤–µ—Ä: **<t:{round(user_to_member.joined_at.timestamp())}:R> | {(datetime.utcnow() - user_to_member.joined_at.replace(tzinfo=None)).days} –¥–Ω–µ–π**",
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π: **{len(list(filter(lambda role: role, user_to_member.roles)))}**",
                f"–°—Ç–∞—Ç—É—Å: {str(user_to_member.activity) + ' | ' if user_to_member.activity else ''}{statuses[user_to_member.status]}"
            ]

            if len(spotify):
                data = spotify[0]
                timestamps = (str(data._timestamps['end'])[:10], str(data._timestamps['start'])[:10])

                embed.add_field(
                    name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ç—Ä–µ–∫ —Å–ø–æ—Ç–∏—Ñ–∞–π", 
                    value=f"–ü–µ—Å–Ω—è: [{data.title} | {', '.join(data.artists)}]({data.track_url})\n" \
                        f"–ê–ª—å–±–æ–º: [{data.album}]({data.album_cover_url})\n" \
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏: {naturaldelta(data.duration.total_seconds())} | <t:{timestamps[0]}:R> - <t:{timestamps[-1]}:R>"
                )

        embed.description = "\n".join(main_information) + "\n" + "\n".join(
            second_information) if user in inter.guild.members else "\n".join(main_information)

        try:
            embeds = [embed, permissions_embed]
        except UnboundLocalError:
            embeds = [embed]
        
        if len(embeds) > 1:
            view = Paginator(embeds, inter.author)
        else:
            view = None

        try:
            await inter.send(embed=embeds[0], file=file)
        except UnboundLocalError:
            await inter.send(embed=embeds[0], view=view)


    @commands.slash_command(
        description="–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏–∫"
    )
    async def emoji(self, inter, emoji):
        if emoji in emj.UNICODE_EMOJI_ALIAS_ENGLISH:
            await inter.send(emoji)
        else:
            get_emoji_id = int(''.join(re.findall(r'[0-9]', emoji)))
            url = f"https://cdn.discordapp.com/emojis/{get_emoji_id}.gif?size=480&quality=lossless"
            embed = disnake.Embed(
                title=f"–≠–º–æ–¥–∑–∏ **{emoji}**",
                image=await emoji_converter('webp', url)
            )

            await inter.send(embed=embed)

    @commands.is_nsfw()
    @commands.slash_command(name='emoji-random', description="–Ø –Ω–∞–π–¥—É —Ç–µ–±–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —ç–º–æ–¥–∑–∏–∫ :3")
    async def random_emoji(self, inter):
        emoji = random.choice(self.bot.emojis)
        
        embed = disnake.Embed(description="–≠–º–æ–¥–∑—è—è—è—è—è—è—è—è")
        embed.set_image(url=emoji.url)
        embed.add_field(name="–°–∫–∞—á–∞—Ç—å —ç–º–æ–¥–∑–∏–∫", value=f'[–¢–´–ö–¢–´–ö–¢–´–ö]({emoji.url})')
        await inter.send(embed = embed)

    @commands.slash_command(
        name="random-anime",
        description="–í—ã –∂–µ –ª—é–±–∏—Ç–µ –∞–Ω–∏–º–µ? –Ø –¥–∞, –∞ –≤–æ—Ç —Ç—É—Ç —è –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–∞–º –∞–Ω–∏–º–µ!",
        guild_ids=[958094412397834321]
    )
    async def random_anime(self, inter):
        url = 'https://animego.org'

        async with aiohttp.ClientSession(
                headers={
                    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 OPR/80.0.4170.91',
                }) as session:
            async with session.get(f'{url}/anime/random') as res:
                soup = BeautifulSoup(await res.text(), 'html.parser')
                name = soup.select('.anime-title')[0].find('h1', class_=False).text
                img = soup.find('div', class_='anime-poster').find('img', class_=False).get('src')
                desc = soup.find('div', class_='description').text
                url = f'{url}{res.url._val.path}'
                await session.close()
        desc = re.sub('\n', '', desc, 1)
        await inter.send(
            embed = disnake.Embed(
                description=f'**[{name}]({url})**\n**–û–ø–∏—Å–∞–Ω–∏–µ**\n> {desc}',
                thumbnail=re.sub('media/cache/thumbs_\d{3}x\d{3}', '', img)
            )
        )

    @commands.slash_command(name="currency", description="–ü–æ–¥—Å–∫–∞–∂—É –≤–∞–º –∫—É—Ä—Å —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –≤–∞–ª—é—Ç—ã :) (–í —Ä—É–±–ª—è—Ö!)")
    async def currency_converter(self, inter, currency, how_many: float = 0):
        async with self.bot.session.get('https://www.cbr-xml-daily.ru/daily_json.js') as response:
            cb_data = await response.text()

        json_cb_data = json.loads(cb_data)
        get_currency = {i: j['Name'] for i, j in json_cb_data['Valute'].items()}
        data = json_cb_data["Valute"]
        view = CurrencyButton()

        if currency.upper() in data:
            upper_currency = currency.upper()
            embed = disnake.Embed(title=f'–ö—É—Ä—Å - {get_currency[upper_currency]} ({upper_currency})', description=f'–û–¥–∏–Ω {get_currency[upper_currency]} –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–æ–∏—Ç **{round(data[upper_currency]["Value"], 2) / data[upper_currency]["Nominal"]}** —Ä—É–±–ª–µ–π. ({round(data[upper_currency]["Value"] - data[upper_currency]["Previous"], 1)})')
            embed.add_field(name="–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å", value=abs(data[upper_currency]["Value"] - round(data[upper_currency]["Value"])))
            embed.add_field(name="–ü—Ä–æ—à–ª–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", value=data[upper_currency]['Previous'] / data[upper_currency]['Nominal'])
            embed.add_field(name=f"–°–∫–æ–ª—å–∫–æ **{how_many} {upper_currency}** –≤ —Ä—É–±–ª—è—Ö", value=round(how_many * (data[upper_currency]['Value'] / data[upper_currency]['Nominal'])))
            embed.set_footer(text="–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∑—è—Ç–∞ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API –¶–ë –†–§.", icon_url="https://cdn.discordapp.com/attachments/894108349367484446/951452412714045460/unknown.png?width=493&height=491")
            await inter.send(embed = embed, view=view)
        else:
            await inter.send(
                embed=disnake.Embed(
                    title='–ö—É—Ä—Å... –¢–∞–∫, —Å—Ç–æ–ø',
                    description="–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –∏–∑ –≤–∞–ª—é—Ç (–ö–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ)"
                ), view=view
            )

    @commands.slash_command(description="–ü–µ—Ä–µ–≤–µ–¥—É —Ç–µ–±–µ –≤—Å—ë, —á—Ç–æ –º–æ–∂–Ω–æ!")
    async def translate(self, inter, text, to_language, from_language='auto'):
        google = GoogleTranslator()
        data = await google.translate_async(text, to_language, from_language)
        
        embed = disnake.Embed(title='–°–ø–∞—Ä–∫–ª–∏-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫', description=data)
        embed.add_field(name="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", value=text)
        embed.set_footer(text=f'–ü–µ—Ä–µ–≤–æ–¥–µ–Ω–æ —Å {from_language} –Ω–∞ {to_language}', icon_url='https://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Google_Translate_logo.svg/1200px-Google_Translate_logo.svg.png')

        await inter.send(embed = embed)
        

    @commands.slash_command(description="–ü–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –ø–æ—á—Ç–∏ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä!")
    async def calculator(self, inter, expression: str):
        async with self.bot.session.get(f'http://api.mathjs.org/v4/?expr={quote(expression)}') as response:
            data = await response.text()
        embed = disnake.Embed(title='–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
        embed.add_field(name="–í–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä", value = expression)
        embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value = data)

        await inter.send(embed = embed)

    @commands.slash_command(name='role-info', description="–í—ã–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–π —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    async def utilities_role_info(self, inter, role: disnake.Role):
        role_info_array = [
            f'–¶–≤–µ—Ç —Ä–æ–ª–∏: **{hex(role.color.value)}**',
            f'–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: **{"–î–∞" if role.is_integration() else "–ù–µ—Ç"}**',
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π —Ä–æ–ª–∏: **{len(role.members)}**',
            f'ID —Ä–æ–ª–∏: **{role.id}**',
            f'–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏: {role.mention}',
            f'–ü–æ–∑–∏—Ü–∏—è: **{role.position}**',
            f'–†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞: <t:{round(role.created_at.timestamp())}:D>'
        ]
        embed = disnake.Embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {role.name}",
            description='\n'.join(role_info_array),
        )

        if role.icon:
            embed.set_thumbnail(url=role.icon.url)

        await inter.send(embed=embed)

    @commands.slash_command(
        name='wikipedia',
        description="–ù–∞–π–¥—ë—Ç—Å—è –≤—Å—ë!"
    )
    async def utilities_wiki(self, inter, query: str) -> str:
        wikipedia.set_lang(prefix='ru')
        wiki_view = disnake.ui.View()

        if len(wikipedia.search(query)):
            wiki_view.add_item(
                WikiDropdown(
                    wiki_options=[SelectOption(label=i) for i in wikipedia.search(query)],
                    bot=self.bot,
                    author=inter.author
                )
            )
        else:
            wiki_view.add_item(disnake.ui.Button(label='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(', disabled=True))

        await inter.send(view=wiki_view)
        
    @commands.slash_command(
        name="invites",
        description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"
    )
    async def invites_top_info(self, inter):
        data = enumerate(sorted([(i.uses, str(i.inviter), i.url) for i in await inter.guild.invites()], key=lambda x: x[0], reverse=True))
        invite_data = list(data)
        yield_invite_data = lambda _: (f'{i[0]+1}. "{i[-1][-1].split("/")[-1]}" -> {i[1][0]} | {i[1][1]}' for i in invite_data if i[0]+1 <= 15)

        await inter.send(embed=disnake.Embed(title="–¢–æ–ø —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞–ª", description='```py\n' + '\n'.join(list(yield_invite_data(invite_data))) + '```'))

def setup(bot: commands.Bot):
    bot.add_cog(Utilities(bot))