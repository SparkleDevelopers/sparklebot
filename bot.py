import time
import datetime
def time4logs():
    return f'[{datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}]'
print(time4logs(), '–ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞')
start = time.time()
import logging
import sys
import os
import asyncio
import random
import sqlite3
import json
import traceback
import copy
import aiohttp
import Tools
import requests
from memory_profiler import memory_usage
import requests
import json
import io
import contextlib
import oauth
import textwrap
from traceback import format_exception
import asyncio
import subprocess
from disnake.utils import get
from disnake.ext import commands, tasks #del tasks after ver

from PIL import Image, ImageDraw, ImageFilter, ImageFont

from disnake.ext import commands #commands from external
from disnake.ext.commands import has_role #has a role
from disnake.ext.commands import has_permissions #permissions
from disnake.ext.commands import MissingPermissions #the missing perms
from disnake.ext.commands import BadArgument #incorrect arguments
from disnake.ext.commands import CheckFailure #failure

from disnake.utils import get
from disnake import utils

from asyncio import sleep

from disnake.ext.commands.errors import MissingPermissions
from disnake.ext.commands.errors import BadArgument
from disnake.ext.commands.errors import CheckFailure
from disnake.ext.commands import cooldown, BucketType
from config import *
from os import listdir

import disnake
import humanize
from disnake.ext import commands
from disnake.gateway import DiscordWebSocket
from jishaku.modules import find_extensions_in

from core.classes.embeds import Embeds
from core.classes.another_embeds import SparkleEmbed
from core.classes.custom_context import SparkleContext

from Tools.mobile_status import sparkle_mobile_identify

from Tools import prefix as prefixes
print(time4logs(), '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã')
print(time4logs(), "–í–µ—Ä—Å–∏—è disnake:", disnake.__version__)


#–ù–∞—á–∞–ª–æ –∫–æ–¥–∞ –±–æ—Ç–∞

CONFIG = json.load(open("config.json"))
TOKEN = CONFIG["token"]
DEFAULTPREFIX = CONFIG["default_prefix"]
INVITE = "https://discord.com/api/oauth2/authorize?client_id=932281102486372443&permissions=8&scope=bot"
EMBEDFOOTER = "–ó–û–í–£–¢ –ú–ê–ö–°–ò–ú#3903 | sparklebot.fun"
release = oauth.release
if release:
    token = Auth.discord_auth["release"]
else:
    token = Auth.discord_auth["debug"]
    
begin = time.time()

class Sparkle(commands.AutoShardedBot):

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.humanize = humanize.i18n.activate("ru_RU")
        self.embeds = Embeds(0xa8a6f0)
        self.embed = SparkleEmbed
        self.config = Config()
        DiscordWebSocket.identify = sparkle_mobile_identify
        
    def __getitem__(self, item: str) -> commands.Command:
        return self.get_command(item)


    def __delitem__(self, item: str) -> commands.Command:
        return self.remove_command(item)
        
    async def get_context(self, message, *, cls=SparkleContext):
        return await super().get_context(message=message, cls=cls)

    async def on_ready(self):
        if not self.checks.nsfw.is_running():
            self.checks.nsfw.start()

intents = disnake.Intents.all()
client = Sparkle(command_prefix=prefixes.get2, intents=intents, strip_after_prefix=True, case_insensitive=True, enable_debug_events=False,status=disnake.Status.online)
client.remove_command("help")

intents = disnake.Intents.all()
client = Sparkle(command_prefix=prefixes.get2, intents=intents, strip_after_prefix=True, case_insensitive=True, enable_debug_events=False,status=disnake.Status.online)
client.remove_command("help")

#–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö
db = sqlite3.connect("data/database.db")
sql = db.cursor()

print(time4logs(), '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —à–∞—Ä–¥–æ–≤')

for filename in os.listdir("./cogs"):
    if filename.endswith(".py") and not filename.startswith("_"):
        client.load_extension(f'cogs.{filename[:-3]}')
        print(time4logs(), f"Module {filename} is loaded!")

print(time4logs(), f"All modules is loaded!")
print(time4logs())



@client.event
async def on_ready():
    servers = len(client.guilds)
    members = 0
    for guild in client.guilds:
        members += guild.member_count - 1
    print(time4logs(), f"[INFO]")
    print(time4logs(), f"[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –Ω–∏–∫–æ–º: {client.user}")
    print(time4logs(), f"[INFO] –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ó–û–í–£–¢ –ú–ê–ö–°–ò–ú#3903")
    print(time4logs(), f"[INFO] –ê–π–¥–∏ –±–æ—Ç–∞: {client.user.id}")
    print(time4logs(), f"[INFO]")
    print(time4logs(), '[INFO] [STATUS] –°—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω!')
    #—Å—Ç–∞—Ç—É—Å
    while True:
        await client.change_presence(activity=disnake.Game(name="üî•,help | sparklebot.tk"))
        await sleep(15)
        await client.change_presence(activity=disnake.Activity(type=disnake.ActivityType.watching, name="Beta 4.2"))
        await sleep(15)
        await client.change_presence(activity=disnake.Activity(type=disnake.ActivityType.watching, name=f"–∑–∞ {servers} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ {members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"))
        await sleep(15)

@client.event
async def on_guild_join(guild):
    prefixes.set(guild.id, DEFAULTPREFIX)
    print(f'{time4logs()} [INFO] –ú–µ–Ω—è –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä! –ê–π–¥–∏: {guild.id}')
    

@client.event
async def on_shard_connect(shard_id):
    print(time4logs(), f'–®–∞—Ä–¥ {shard_id} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ;)')
        
@client.event
async def on_socket_raw_receive(msg):
    print('<<', msg)

@client.event
async def on_socket_raw_send(payload):
    print('>>', payload)
    
@client.command(name="ram", aliases = ["rams", "memory", "–æ–ø–µ—Ä–∞—Ç–∏–≤–∫–∞"])
async def ram(ctx):
    if ctx.author.id in [578533097293873162, 743821499839807608, 805881717415346236]:
        emb = disnake.Embed()
        emb.color = 0xffffff
        emb.title = "üíø | –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å"
        emb.description = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: **{round(memory_usage()[0], 2)} –ú–±**."
        await ctx.send(embed = emb)
    else:
        await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤(")

@client.slash_command(name="ram", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å.")
async def ram(ctx):
    if ctx.author.id in [578533097293873162, 743821499839807608, 805881717415346236]:
        emb = disnake.Embed()
        emb.color = 0xffffff
        emb.title = "üíø | –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å"
        emb.description = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: **{round(memory_usage()[0], 2)} –ú–±**."
        await ctx.send(embed = emb)
    else:
        await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤(")
        
        
async def print_ram():
    while True:
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {round(memory_usage()[0], 2)} –ú–±.")
        await asyncio.sleep(30)
        
guilds, ts = [], []

def clean_code(content):
    if content.startswith("```") and content.endswith("```"):
        return "\n".join(content.split("\n")[1:])[:-3]
    else:
        return content
        
@client.command(name="exec", aliases = ["eval", "e"])
async def _eval(ctx, *, code):
    #await ctx.message.delete()
    if ctx.author.id in [578533097293873162, 805881717415346236]:
        pending_embed = disnake.Embed(title = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!', description = '–ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', color = disnake.Colour.from_rgb(255, 255, 0))
        message = await ctx.reply(embed = pending_embed)
        success_embed = disnake.Embed(title = '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ - —É—Å–ø–µ—Ö', color = disnake.Colour.from_rgb(0, 255, 0))
        code = clean_code(code)
        local_variables = {
            "discord" : disnake,
            "disnake": disnake,
            "db": db,
            "commands": commands,
            "client": client,
            "bot": client,
            "ctx": ctx,
            "channel": ctx.channel,
            "author": ctx.author,
            "guild": ctx.guild,
            "message": ctx.message
        }
        stdout = io.StringIO()
        try:
            with contextlib.redirect_stdout(stdout):
                exec(
                    f"async def func():\n{textwrap.indent(code, '    ')}", local_variables,
                )
                obj = await local_variables["func"]()
                result = stdout.getvalue()
                success_embed.add_field(name = '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–æ–¥:', value = f'```py\n{code}\n```', inline = False)
                what_returned = None
                if obj != None:
                    if isinstance(obj, int) == True:
                        if obj == True:
                            what_returned = '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                        elif obj == False:
                            what_returned = '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
                        else:
                            what_returned = '–¶–µ–ª–æ–µ —á–∏—Å–ª–æ'
                    elif isinstance(obj, str) == True:
                        what_returned = '–°—Ç—Ä–æ–∫–∞'
                    elif isinstance(obj, float) == True:
                        what_returned = '–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ'
                    elif isinstance(obj, list) == True:
                        what_returned = '–°–ø–∏—Å–æ–∫'
                    elif isinstance(obj, tuple) == True:
                        what_returned = '–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫'
                    elif isinstance(obj, set) == True:
                        what_returned = '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫'
                    else:
                        what_returned = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö...'
                    success_embed.add_field(name = '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', value = f'```\n{what_returned}\n```', inline = False)
                    success_embed.add_field(name = '–í–µ—Ä–Ω—É–ª–æ—Å—å:', value = f'```\n{obj}\n```', inline = False)
                else:
                    pass
                if result:
                    success_embed.add_field(name = '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', value = f'```py\n–ö–æ–Ω—Å–æ–ª—å:\n\n{result}\n```', inline = False)
                else:
                    pass
                await message.edit(embed = success_embed)
        except Exception as e:
            result = "".join(format_exception(e, e, e.__traceback__))
            fail_embed = disnake.Embed(title = '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ - –ø—Ä–æ–≤–∞–ª', color = disnake.Colour.from_rgb(255, 0, 0))
            fail_embed.add_field(name = '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–æ–¥:', value = f'```py\n{code}\n```', inline = False)
            fail_embed.add_field(name = '–û—à–∏–±–∫–∞:', value = f'```py\n{e}\n```', inline = False)
            await message.edit(embed = fail_embed, delete_after = 60)
    else:
        fail_embed = disnake.Embed(title = '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ - –ø—Ä–æ–≤–∞–ª', color = disnake.Colour.from_rgb(255, 0, 0))
        fail_embed.add_field(name = '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–æ–¥:', value = f'```py\n–∫–æ–¥ —Å–∫—Ä—ã—Ç –∏–∑-–∑–∞ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n```', inline = False)
        fail_embed.add_field(name = '–û—à–∏–±–∫–∞:', value = f'```\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.\n```', inline = False)
        await ctx.reply(embed = fail_embed, delete_after = 60)

@client.slash_command(name="setprefix", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å.")
async def setprefix(ctx, newprefix: str = None):
    if ctx.author.guild_permissions.administrator:
        if newprefix is not None:
            prefixes.set(ctx.guild.id, newprefix)
            prefix = prefixes.get(ctx.guild.id)
            
            embed = disnake.Embed(title="<:yes:987416897073086565> –£—Å–ø–µ—à–Ω–æ!", description=f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å ` {prefix} `!", color=disnake.Color.green())

            await ctx.send(embed=embed)

        else:
            prefix = prefixes.get(ctx.guild.id)
            
            embed = disnake.Embed(title="<:no:987416933282488341> –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", description=f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: `{prefix}setprefix (–ø—Ä–µ—Ñ–∏–∫—Å)`", color=disnake.Color.red())

            await ctx.send(embed=embed)

@client.slash_command(name="load", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å.")
async def load (ctx, extension):
    if ctx.author.id in [578533097293873162, 805881717415346236]:
        client.load_extension(f"cogs.{extension}")
        embed=disnake.Embed(title="Load", description=f"Module ` {extension} ` successfully loaded!", color=0x292B2F)
        await ctx.send(embed=embed)
    else:
        await ctx.send("<:X_:946355338364469258> –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        

@client.slash_command(name="unload", description="–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å.")
async def unload (ctx, extension):
    if ctx.author.id in [578533097293873162, 805881717415346236]:
        client.unload_extension(f"cogs.{extension}")
        embed=disnake.Embed(title="Unload", description=f"Module ` {extension} ` successfully unloaded!", color=0x292B2F)
        await ctx.send(embed=embed)
    else:
        await ctx.send("<:X_:946355338364469258> –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")    

@client.slash_command(name="reload", description="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç –º–æ–¥—É–ª—å.")
async def reload (ctx, extension):
    if ctx.author.id in [578533097293873162, 805881717415346236]:
        client.unload_extension(f"cogs.{extension}")
        client.load_extension(f"cogs.{extension}")
        embed=disnake.Embed(title="Reload", description=f"Module ` {extension} ` successfully reloaded!", color=0x292B2F)  
        await ctx.send(embed=embed)
    else:
        await ctx.send("<:X_:946355338364469258> –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")     

@client.command(name="ping")
async def ping(ctx: commands.Context):
    dpyVersion = disnake.__version__
    servers = len(client.guilds)
    members = len(set(client.get_all_members()))

    shard_id = ctx.guild.shard_id
    shard = client.get_shard(shard_id)
    shard_ping = round(shard.latency * 1000)
    shard_servers = len([guild for guild in client.guilds if guild.shard_id == shard_id])
    embed=disnake.Embed(title=f"<:pingapii:979443700721664010> API Connection: {round(client.latency * 1000)}ms.", color=0x292B2F)
    embed.add_field(name="–°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞—Ä–¥–æ–≤", value=f"C–∫–æ—Ä–æ")
    await ctx.reply(embed=embed)
    

client.run(TOKEN)